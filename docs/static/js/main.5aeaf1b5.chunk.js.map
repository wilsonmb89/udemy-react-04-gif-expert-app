{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","noValidate","onSubmit","e","preventDefault","length","categories","some","cat","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","then","resStream","json","restData","data","gifsData","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAwCeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAErB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACE,sBAAMC,YAAU,EACdC,SAfiB,SAACC,GACpBA,EAAEC,iBACIL,GAAcA,EAAWM,OAAS,GACtCR,GAAc,SAAAS,GACZ,OAAKA,EAAWC,MAAK,SAAAC,GAAG,OAAIA,IAAQT,KAI7BO,GAHLN,EAAc,IACR,CAAED,GAAR,mBAAuBO,SAQ7B,SAGE,uBAAOG,KAAK,OACVC,YAAY,2BACZC,MAAOZ,EACPa,SAvBoB,SAACT,GACzBH,EAAcG,EAAEU,OAAOF,a,uBCRdG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEYI,MAAMF,GAAKG,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAFnD,uBAEPC,EAFO,EAEbC,KACFC,EAAWF,EAASG,KAAI,SAAAC,GAAG,YAAK,CACpCC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QANf,kBAQdQ,GARc,2CAAH,sDCYLO,EAVK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAEhC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKP,IACpB,4BAAKC,QCwBIO,EA1BC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEjB,ECJ0B,SAACA,GAE3B,MAA0BjB,mBAAS,CACjCuC,SAAS,EACTb,KAAM,KAFR,mBAAOc,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACR1B,EAAQC,GAAUK,MAAK,SAAAqB,GACrBF,EAAS,CACPF,SAAS,EACTb,KAAMiB,SAGT,CAAC1B,IAEGuB,EDZ2BI,CAAa3B,GAAvCsB,EAAR,EAAQA,QAAeP,EAAvB,EAAiBN,KAEjB,OACE,eAAC,WAAD,WACE,oBAAIS,UAAU,oCAAd,SAAoDlB,IACnDsB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOZ,EAAd,EAAcA,IAAd,OACV,cAAC,EAAD,CAEEW,GAAIA,EACJC,MAAOA,EACPZ,IAAKA,GAHAW,YEOFe,EAnBM,WAEnB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACE,eAAC,WAAD,WACE,6CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC3BS,EAAWoB,KAAI,SAAAX,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAUA,GADLA,U,MCTf6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5aeaf1b5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!!inputValue && inputValue.length > 2) {\n      setCategories(categories => {\n        if (!categories.some(cat => cat === inputValue)) {\n          setInputValue('');\n          return [inputValue, ...categories];\n        }\n        return categories;\n      });\n    }\n  };\n\n  return (\n    <form noValidate\n      onSubmit={handleSubmit}\n    >\n      <input type=\"text\"\n        placeholder='Ingrese una categoría'\n        value={inputValue}\n        onChange={handleInputChange}\n      ></input>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Fw2qmJRPk5h1KKOxBp76388btMRNZL9x`;\n  const { data: restData } = await fetch(url).then(resStream => resStream.json());\n  const gifsData = restData.map(img => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url\n  }));\n  return gifsData;\n};\n","import React from 'react';\n\nconst GifGridItem = ({ id, title, url }) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={id} />\n      <p>{ title }</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n  const { loading, data: images } = useFetchGifs(category);\n\n  return (\n    <Fragment>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\n      <div className=\"card-grid\">\n        {images.map(({ id, title, url }) => (\n          <GifGridItem\n            key={id}\n            id={id}\n            title={title}\n            url={url}\n          />\n        ))}\n      </div> \n    </Fragment>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    loading: true,\n    data: []\n  });\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setState({\n        loading: false,\n        data: imgs\n      });\n    });\n  }, [category]);\n\n  return state;\n}","import React, { Fragment, useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['Samurai X']);\n\n  return(\n    <Fragment>\n      <h2>GiExpertApp</h2>\n      <hr />\n      <AddCategory setCategories={setCategories}/>\n      {categories.map(category =>\n        <GifGrid\n          key={category}\n          category={category}\n        ></GifGrid>\n      )}\n    </Fragment>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}